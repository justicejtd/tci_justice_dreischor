package tci.demo.week1.buffer;

/**
 * this is a class for a bounded buffer (=buffer with fixed size).
 *
 *
 */
public class IntBuffer implements IIntBuffer {


    /**
     *
     * @param validBuffersize
     *
     * @should have a positive buffersize when creating the buffer
     * @should throw a Illegalargumentexception when size is smaller or equal to 0
     */
    public IntBuffer(int validBuffersize) {
        // TODO
    }

    /**
     * put a value in the buffer. Throw an BufferIsFullException when buffer is full
     *
     * @param val
     * @should add a value when the buffer is not full
     * @should throw illegalargument exception when buffer is full
     *
     */
    @Override
    /**
     * @should throw bufferisfullexception when buffer is full
     * @should number of items in buffer is increased by 1 with non-full buffer
     */
    public void put(int val) throws BufferIsFullException {
// TODO
    }

    /**
     * @return the sum of values in the buffer
     */
    @Override
    public int getSum() {
        return 0;// TODO
    }

    /**
     * shows if buffer is full
     *
     * @return true if buffer is full, otherwise false
     */
    @Override
    public boolean bufferIsFull() {
        return false;// TODO
    }

    /**
     * @return nr of items put in the buffer
     */
    @Override
    public int getNrOfItemsInBuffer() {
        return 0;// TODO
    }

    /**
     * buffersize
     *
     * @return size of the buffer.
     */
    @Override
    public int getBufferSize() {
        return 0;// TODO
    }


    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/




}
