package tci.demo.week2.school;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Group_withTestSpecification represents a group of unique students, e.g. a class e-s72,
 * and is uniquely identified by it's name.
 * When a group has no name yet, it automatically is given
 * the temporary name "unknown". The name can be changed later.
 */
public class Group {

    private String name; // name of the group is the class name, e.g, "e-s72"
    private Set<Student> students = new HashSet<>(); // students in this group

    /**
     * Creates a group with a default name "unknown"
     *
     * @should create group with default name when no name is given
     */
    public Group() {
        this.name = "unknown";
    }


    /**
     * Creates a Group_withTestSpecification object with a given name.
     *
     * @param name is the name of the group/class, e.g., "e-s72",
     * @should create a group with given, non-null name
     * @should create a group with default name, when null is given as name
     * @should show that logically same groups are equal and have same hashcode
     * @should show that different groups are not equal
     */
    public Group(String name) {
        if (name == null) {
            this.name = "unknown";
        } else {
            this.name = name;
        }
    }


    /**
     * Add a student to the group
     *
     * @param student Student to add
     * @should add a given non-null student to the group
     * @should add nothing when student is null
     * @should not add a student twice to the group
     */
    public void addStudent(Student student) {
        if (student == null) {
            return;
        }
        students.add(student);
    }

    /**
     * Assigns a mentor to all students in this group
     *
     * @param mentor is the mentor of the group
     * @should set the mentor for all students in the group
     * @should leave current assigned mentor unchanged when mentor is null
     */
    public void setMentor(String mentor) {
        if (mentor == null) {
            return;
        }
        for (Student s : this.students
        ) {
            s.setMentor(mentor);
        }

    }

    /**
     * @param studentNumber
     * @return a Student object when found, otherwise null
     * @should return null when student with given ID is not present in the group
     * @should return student when student with given ID was added to the group before
     */
    public Student getStudentById(int studentNumber) {
        Student returnvalue = null;
        for (Student s : this.students
        ) {
            if (s.getStudentNumber() == studentNumber) {
                returnvalue = s;
                break;
            }
        }
        return returnvalue;
    }


    /**
     * @return number of students in this group
     * @should return 0 when no students are added
     * @should return 1 higher when student is added
     */
    public int getNumberOfStudents() {
        return this.students.size();
    }

    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /******************************************************
     *
     *   OTHER CODE GENERATED BY INTELLIJ,
     *   BUT BASED ON INPUT OF A PROGRAMMER.
     *   THE BEHAVIOUR OF THIS CODE HAS TO BE TESTED.
     *   (but not present to keep demo code short)
     *
     ********************************************************/

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Group group = (Group) o;
        return name.equals(group.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }


}
