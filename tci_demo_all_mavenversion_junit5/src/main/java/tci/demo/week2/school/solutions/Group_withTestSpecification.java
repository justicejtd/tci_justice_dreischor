package tci.demo.week2.school.solutions;

import tci.demo.week2.school.Student;

import java.util.ArrayList;
import java.util.Objects;

/**
 * Group_withTestSpecification represents a group of unique students, e.g. a class e-s72,
 * A group is identified by it's name.
 * When a group has no name yet, it automatically is given
 * the temporary name "unknown". The name can be changed later.
 * <p>
 * a student can be added to a group.
 * A mentor can be assigned to a group,
 * this means each individual student is assigned this mentor.
 */
public class Group_withTestSpecification {

    private final ArrayList<Student> students = new ArrayList<>();
    private final String name;
    private final String defaultName = "unknown";

    /**
     * Creates a group with a default name "unknown"
     *
     * @should create group with default name when no name is given
     */
    public Group_withTestSpecification() {
        name = defaultName;
    }

    /**
     * Creates a Group_withTestSpecification object with a given name.
     *
     * @param name is the name of the group/class, e.g., "e-s72",
     * @should create a group with given, non-null name
     * @should create a group with default name, when null is given as name
     * @should show that logically same groups are equal and have same hashcode
     * @should show that different groups are not equal
     */
    public Group_withTestSpecification(String name) {
        if (name == null) {
            name = defaultName;
        }
        this.name = name;
    }


    /**
     * Add a student to the group
     *
     * @param student Student to add
     * @should add a given non-null student to the group
     * @should add nothing when student is null
     * @should not add a student twice to the group
     */
    public void addStudent(Student student) {
        if (student != null) {
            if (!getStudents().contains(student)) {
                getStudents().add(student);
            }
        }
    }

    /**
     * Assigns a mentor to all students in this group
     *
     * @param mentor is the mentor of the group
     * @should set the mentor for all students in the group
     * @should leave current assigned mentor unchanged when mentor is null
     */
    public void setMentor(String mentor) {
        for (Student s : getStudents()) {
            s.setMentor(mentor);
        }
    }

    /**
     * @param studentNumber
     * @return a Student object when found, otherwise null
     * @should return null when student with given ID is not present in the group
     * @should return student when student with given ID was added to the group before
     */
    public Student getStudentById(int studentNumber) {
        Student foundStudent = null;
        for (Student s : getStudents()) {
            if (s.getStudentNumber() == studentNumber)
                foundStudent = s;
            break;
        }
        return foundStudent;
    }

    /**
     * @return number of students in this group
     * @should return 0 when no students are added
     * @should return 1 higher when student is added
     */
    public int getNumberOfStudents() {
        return getStudents().size();
    }

    public String getName() {
        return name;
    }

    public ArrayList<Student> getStudents() {
        return students;
    }

    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/

    // generate:
    // public String getName()
    // public void setName(String name)
    // TODO


    /******************************************************
     *
     *   OTHER CODE GENERATED BY INTELLIJ,
     *   BUT BASED ON INPUT OF A PROGRAMMER.
     *   THE BEHAVIOUR OF THIS CODE HAS TO BE TESTED.
     *   (but not present to keep demo code short)
     *
     ********************************************************/
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Group_withTestSpecification)) return false;
        Group_withTestSpecification group = (Group_withTestSpecification) o;
        return Objects.equals(getName(), group.getName());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getName());
    }
}
