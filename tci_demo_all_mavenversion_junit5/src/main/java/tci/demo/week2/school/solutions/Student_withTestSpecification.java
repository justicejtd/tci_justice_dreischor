package tci.demo.week2.school.solutions;

import tci.demo.week2.school.Course;
import tci.demo.week2.school.IStudent;
import tci.demo.week2.school.NotFoundException;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A student is identified by studentNumber and name.
 * A student gets semester number 1 when enrolled for the first time (e.g., new regular bachelor students).
 * studentnumber never changes. the name can change.
 *
 * semesters range from 1..8
 * with a unique student number, consisting of 5 digits.
 */

public class Student_withTestSpecification implements IStudent {

    /**
     * Constructor which sets fields for studentNumber and firstName. Field semester is set to 1.
     * Should be used when student is enrolled in the first semester (e.g., regular bachelor students).
     *
     * @param studentNumber student number of 5 digits.
     * @param name     full full name of the student, e.g., Joe van der Smith
     * @throws IllegalArgumentException Exception is thrown is studentNumber is not a positive 5-digits integer,
     *                                  or semester is not in range [1..8].
     * @should
     * @should throw illegalargument exception when studentnumber is NOT a positive 5-digit number
     * @should throw illegalargument exception when semester is not in range [1..8]
     * @should create Student with studentnumber 0
     * @should create Student with positive 5-digit number and semester in range [1..8]
     */
    public Student_withTestSpecification(int studentNumber, String name) throws IllegalArgumentException {
        //TODO
    }


    /**
     * get the total ECs from all passed courses.
     * @return number of ECs.
     * @should return 0 when no courses are passed
     * @should return sum of individual passed courses which were added
     *
     */
    @Override
    public int getTotalECs() {
        return 0;//TODO
    }

    /**
     * adds a passed course to a student. a student can only pass a course once.
     * @param course
     * @should add nothing when course is null
     * @should add a course when it's not present yet
     * @should not add a course which is already present
     */
    @Override
    public void addPassedCourse(Course course) {
        //TODO
    }

    /**
     * removes a passed course from a student.
     * @param course passed course to remove
     * @throws NotFoundException when course is not found
     * @should remove a course when it is present
     * @should throw notfoundexception is given course is not present.
     */
    @Override
    public void removePassedCourse(Course course) throws NotFoundException {
        //TODO
    }

    @Override
    public int getStudentNumber() {
        return 0;//TODO
    }

    @Override
    public String getName() {
        return null;//TODO
    }

    @Override
    public void setName(String name) {
//TODO
    }

    @Override
    public String getMentor() {
        return null;//TODO
    }

    @Override
    public void setMentor(String mentor) {
//TODO
    }


    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/


    /******************************************************
     *
     *   OTHER CODE GENERATED BY INTELLIJ,
     *   BUT BASED ON INPUT OF A PROGRAMMER.
     *   THE BEHAVIOUR OF THIS CODE HAS TO BE TESTED.
     *   (but not present to keep demo code short)
     *
     ********************************************************/
    //TODO
}
